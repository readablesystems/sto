# @configure_input@
-include config.mk

LIBRPMALLOC := third-party/rpmalloc/lib/linux/release/x86-64/librpmallocwrap.a

ifeq ($(USE_JEMALLOC),1)
LIBMALLOC := -ljemalloc
else
LIBMALLOC := -ldl
endif

AR = ar
CC = @CC@
CXX = @CXX@
CPPFLAGS := -std=c++17
MTFLAGS:= -L${LD_LIBRARY_PATH} -lwh -lpthread
DEPSDIR := .deps
DEPCFLAGS = -MD -MF $(DEPSDIR)/$*.d -MP
LIBS = @LIBS@ $(MASSTREEDIR)/libjson.a $(LIBMALLOC) -lpthread -lm -lnuma
LIBOBJS = @LIBOBJS@
LDFLAGS = @LDFLAGS@
MASSTREEDIR = @MASSTREEDIR@

ifneq ($(USE_JEMALLOC),1)
ifneq ($(USE_LIBCMALLOC), 1)
LIBOBJS += $(LIBRPMALLOC)
endif
endif

ifeq ($(ASAN),1)
LIBS += -lasan
endif

OBJ = obj

XXHASH_DIR = third-party/xxHash
XXHASH_OBJ = $(OBJ)/xxhash.o

CPPFLAGS += -I$(MASSTREEDIR) -I$(XXHASH_DIR) -Ithird-party/rpmalloc
CPPFLAGS += -Ilib -Isto-core -Ilegacy -Idatatype -Ibenchmark

# if CXXFLAGS changes, rebuild
ifndef CXXFLAGS
CXXFLAGS :=
endif

ifeq ($(USE_LIBCMALLOC),1)
CXXFLAGS += -DMALLOC=0
else
ifeq ($(USE_JEMALLOC),1)
CXXFLAGS += -DMALLOC=1
else
CXXFLAGS += -DMALLOC=2
endif
endif

ifeq ($(NDEBUG),1)
CXXFLAGS += -DNDEBUG
endif

ifeq ($(USE_EXCEPTION),1)
CXXFLAGS += -DSTO_USE_EXCEPTION=1
endif

ifeq ($(DEBUG_ABORTS),1)
CXXFLAGS += -DSTO_DEBUG_ABORTS=1
endif

ifdef PROFILE_COUNTERS
CXXFLAGS += -DSTO_PROFILE_COUNTERS=$(PROFILE_COUNTERS)
endif

ifeq ($(TSC_PROFILE),1)
CXXFLAGS += -DSTO_TSC_PROFILE=1
endif

ifdef USE_HASH_INDEX
CXXFLAGS += -DTPCC_HASH_INDEX=$(USE_HASH_INDEX)
endif

ifdef FINE_GRAINED
CXXFLAGS += -DTABLE_FINE_GRAINED=$(FINE_GRAINED)
endif

ifdef INLINED_VERSIONS
CXXFLAGS += -DMVCC_INLINING=$(INLINED_VERSIONS)
endif

ifdef SPLIT_TABLE
CXXFLAGS += -DTPCC_SPLIT_TABLE=$(SPLIT_TABLE)
endif

ifdef OBSERVE_C_BALANCE
CXXFLAGS += -DTPCC_OBSERVE_C_BALANCE=$(OBSERVE_C_BALANCE)
endif

ifdef SAFE_FLATTEN
CXXFLAGS += -DSAFE_FLATTEN=$(SAFE_FLATTEN)
endif

ifdef CICADA_HASHTABLE
CXXFLAGS += -DCICADA_HASHTABLE=$(CICADA_HASHTABLE)
endif

ifdef CONTENTION_REG
CXXFLAGS += -DCONTENTION_REGULATION=$(CONTENTION_REG)
endif

ifdef CONTENTION_AWARE_IDX
CXXFLAGS += -DCONTENTION_AWARE_IDX=$(CONTENTION_AWARE_IDX)
endif

ifdef HISTORY_SEQ_INSERT
CXXFLAGS += -DHISTORY_SEQ_INSERT=$(HISTORY_SEQ_INSERT)
endif

ifdef SPIN_EXPBACKOFF
CXXFLAGS += -DSTO_SPIN_EXPBACKOFF=$(SPIN_EXPBACKOFF)
else ifdef EXPBACKOFF
CXXFLAGS += -DSTO_SPIN_EXPBACKOFF=$(EXPBACKOFF)
endif

ifdef BOUND
CXXFLAGS += -DSTO_SPIN_BOUND_WRITE=$(BOUND) -DSTO_SPIN_BOUND_WAIT=$(BOUND)
endif

ifdef ABORT_ON_LOCKED
CXXFLAGS += -DSTO_ABORT_ON_LOCKED=$(ABORT_ON_LOCKED)
endif

ifdef DEBUG_SKEW
CXXFLAGS += -DDEBUG_SKEW=$(DEBUG_SKEW)
endif

# OPTFLAGS can change without rebuild
OPTFLAGS := -W -Wall -Wextra

ifeq ($(ASAN),1)
OPTFLAGS += -fsanitize=address
endif

ifndef OPT
OPTFLAGS += -O3
else
OPTFLAGS += -O$(OPT)
endif

ifeq ($(BOOSTING_STANDALONE),1)
CXXFLAGS += -DBOOSTING -DBOOSTING_STANDALONE
LIBOBJS += $(OBJ)/Boosting.o $(OBJ)/Boosting_standalone.o
endif

ifeq ($(BOOSTING_STO),1)
CXXFLAGS += -DBOOSTING -DSTO
endif

# debugging on by default
ifneq ($(NDEBUG),1)
OPTFLAGS += -g
endif

ifeq ($(PROFILE),1)
OPTFLAGS += -g -pg -fno-inline
endif

UNIT_PROGRAMS = \
	unit-tarray \
	unit-tflexarray \
	unit-tintpredicate \
	unit-tcounter \
	unit-tbox \
	unit-tgeneric \
	unit-rcu \
	unit-tvector \
	unit-tvector-nopred \
	unit-mbta \
	unit-sampling \
	unit-opacity \
	unit-swisstarray \
	unit-swisstgeneric \
	unit-masstree \
	unit-tmvbox \
	unit-tmvarray \
	unit-dboindex \
	unit-hashtable \
	unit-tmvbox-concurrent \
	unit-dbindex-concurrent \
	unit-mvcc-access-all

ACT_UNIT_PROGRAMS = \
	unit-tarray \
	unit-tflexarray \
	unit-tintpredicate \
	unit-tcounter \
	unit-tbox \
	unit-rcu \
	unit-tvector \
	unit-tvector-nopred \
	unit-opacity \
	unit-sampling \
	unit-swisstarray \
	unit-swisstgeneric \
	unit-masstree \
	unit-tmvbox \
	unit-tmvarray \
	unit-hashtable \
	unit-dboindex \
	unit-mvcc-access-all \
	unit-tmvbox-concurrent \
	unit-dbindex-concurrent

PROGRAMS = \
	concurrent \
	singleelems \
	list1 \
	vector \
	pqueue \
	rbtree \
	trans_test \
	ht_mt \
	pqVsIt \
	iterators \
	single \
	predicates \
	ex-counter \
	tpcc_bench \
	micro_bench \
	ycsb_bench \
	ht_bench \
	gc_bench \
	pred_bench \
	wiki_bench \
	voter_bench \
	rubis_bench \
	$(UNIT_PROGRAMS)

all: check

.PHONY: deps
deps:
	@ninja --version > /dev/null; status=$$?; if [ $$status -ne 0 ]; then echo \
		"Please install Ninja (sudo apt-get install ninja-build)"; \
		exit $$status; \
		fi

unit: deps $(UNIT_PROGRAMS)

act-unit: deps $(ACT_UNIT_PROGRAMS)

check: act-unit
	@for i in $(ACT_UNIT_PROGRAMS); do echo ./$$i; ./$$i || exit 1; done

%.o: %.c config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/%.o: lib/%.c config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/%.o: lib/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/%.o: sto-core/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/%.o: test/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/%.o: benchmark/%.cc config.h $(DEPSDIR)/stamp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) $(DEPCFLAGS) -include config.h -c -o $@ $<

$(OBJ)/xxhash.o: third-party/xxHash/xxhash.c
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(OPTFLAGS) -c -o $@ $<

rpmalloc: $(LIBRPMALLOC)

$(LIBRPMALLOC): third-party/rpmalloc/configure.py third-party/rpmalloc/Makefile
	$(MAKE) -C third-party/rpmalloc

%.S: %.o
	objdump -S $< > $@

MASSTREE_OBJS = $(MASSTREEDIR)/kvio.o \
	$(MASSTREEDIR)/misc.o \
	$(MASSTREEDIR)/checkpoint.o \
	$(MASSTREEDIR)/string_slice.o

MVCC_OBJS = $(OBJ)/MVCCStructs.o
STO_OBJS = $(OBJ)/Packer.o $(OBJ)/Transaction.o $(OBJ)/TRcu.o $(OBJ)/clp.o \
	$(OBJ)/barrier.o $(OBJ)/SystemProfiler.o $(OBJ)/ContentionManager.o \
	$(OBJ)/PlatformFeatures.o \
	$(LIBOBJS) $(MVCC_OBJS)
INDEX_OBJS = $(STO_OBJS) $(MASSTREE_OBJS) $(OBJ)/DB_index.o
STO_DEPS = $(STO_OBJS) $(MASSTREEDIR)/libjson.a
INDEX_DEPS = $(INDEX_OBJS) $(MASSTREEDIR)/libjson.a


TPCC_TMPLS = $(OBJ)/tpcc_d.o $(OBJ)/tpcc_dc.o $(OBJ)/tpcc_dn.o $(OBJ)/tpcc_dcn.o \
	$(OBJ)/tpcc_m.o $(OBJ)/tpcc_mc.o $(OBJ)/tpcc_mn.o $(OBJ)/tpcc_mcn.o \
	$(OBJ)/tpcc_s.o $(OBJ)/tpcc_t.o $(OBJ)/tpcc_tc.o $(OBJ)/tpcc_tn.o $(OBJ)/tpcc_tcn.o $(OBJ)/tpcc_o.o $(OBJ)/tpcc_oc.o

concurrent: $(OBJ)/concurrent.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

single: $(OBJ)/single.o $(INDEX_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(LDFLAGS) $(LIBS)

singleelems: $(OBJ)/singleelems.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

ex-counter: $(OBJ)/ex-counter.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-rcu: $(OBJ)/unit-rcu.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tarray: $(OBJ)/unit-tarray.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tflexarray: $(OBJ)/unit-tflexarray.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tintpredicate: $(OBJ)/unit-tintpredicate.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tcounter: $(OBJ)/unit-tcounter.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tbox: $(OBJ)/unit-tbox.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tgeneric: $(OBJ)/unit-tgeneric.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tvector: $(OBJ)/unit-tvector.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tvector-nopred: $(OBJ)/unit-tvector-nopred.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-mbta: $(OBJ)/unit-mbta.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-sampling: $(OBJ)/unit-sampling.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-opacity: $(OBJ)/unit-opacity.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-swisstarray: $(OBJ)/unit-swisstarray.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-swisstgeneric: $(OBJ)/unit-swisstgeneric.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-masstree: $(OBJ)/unit-masstree.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_DEPS) $(LDFLAGS) $(LIBS)

unit-tmvarray: $(OBJ)/unit-tmvarray.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-tmvbox: $(OBJ)/unit-tmvbox.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-hashtable: $(OBJ)/unit-hashtable.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

unit-dboindex: $(OBJ)/unit-dboindex.o $(INDEX_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(LDFLAGS) $(LIBS)

unit-dboindexmasstrie: $(OBJ)/unit-dboindexmasstrie.o $(INDEX_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(LDFLAGS) $(LIBS)
	
unit-test_MTrie: $(OBJ)/unit-test_MTrie.o $(INDEX_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(LDFLAGS) $(LIBS) $(MTFLAGS) 
	 
unit-mvcc-access-all: $(OBJ)/unit-mvcc-access-all.o $(INDEX_DEPS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

unit-tmvbox-concurrent: $(OBJ)/unit-tmvbox-concurrent.o $(INDEX_DEPS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

unit-dbindex-concurrent: $(OBJ)/unit-dbindex-concurrent.o $(INDEX_DEPS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_DEPS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

list1: $(OBJ)/list1.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

vector: $(OBJ)/vector.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

pqueue: $(OBJ)/pqueue.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

rbtree: $(OBJ)/rbtree.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

genericTest: $(OBJ)/genericTest.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

trans_test: $(OBJ)/trans_test.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

ht_mt: $(OBJ)/ht_mt.o $(INDEX_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(LDFLAGS) $(LIBS)

pqVsIt: $(OBJ)/pqVsIt.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

iterators: $(OBJ)/iterators.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

predicates: $(OBJ)/predicates.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

hashtable_nostm: $(OBJ)/hashtable_nostm.o $(STO_DEPS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(STO_OBJS) $(LDFLAGS) $(LIBS)

tpcc_bench: $(OBJ)/TPCC_bench.o $(TPCC_TMPLS) $(INDEX_OBJS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

ycsb_bench: $(OBJ)/YCSB_bench.o $(INDEX_OBJS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

ht_bench: $(OBJ)/HT_bench.o $(INDEX_OBJS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

prcu_bench: $(OBJ)/PRCU_bench.o $(INDEX_OBJS) $(XXHASH_OBJ)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(XXHASH_OBJ) $(LDFLAGS) $(LIBS)

micro_bench: $(OBJ)/MicroBenchmarks.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(LDFLAGS) $(LIBS)

gc_bench: $(OBJ)/Garbage_bench.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(LDFLAGS) $(LIBS)

pred_bench: $(OBJ)/Predicate_bench.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $< $(INDEX_OBJS) $(LDFLAGS) $(LIBS)

wiki_bench: $(OBJ)/Wikipedia_bench.o $(OBJ)/Wikipedia_data.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

voter_bench: $(OBJ)/Voter_bench.o $(OBJ)/Voter_data.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

rubis_bench: $(OBJ)/Rubis_bench.o $(INDEX_OBJS)
	$(CXX) $(CXXFLAGS) $(OPTFLAGS) -o $@ $^ $(LDFLAGS) $(LIBS)

$(MASSTREE_OBJS): masstree ;

.PHONY: masstree
masstree: $(MASSTREEDIR)/config.status
	$(MAKE) -C $(MASSTREEDIR)

$(MASSTREEDIR)/libjson.a: $(MASSTREEDIR)/config.status
	$(MAKE) -C $(MASSTREEDIR) libjson.a

config.h: stamp-h

GNUmakefile: GNUmakefile.in config.status
	CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

configure config.h.in: configure.ac
	autoreconf -i
	touch config.h.in

config.status: configure
	./configure @ac_configure_args@

$(DEPSDIR)/stamp:
	mkdir -p $(DEPSDIR)
	touch $@

stamp-h: config.h.in config.status
	CONFIG_FILES= $(SHELL) ./config.status
	echo > stamp-h

clean:
	rm -f $(PROGRAMS) $(OBJ)/*.o $(OBJ)/*.S
	rm -f $(LIBOBJS)
	rm -rf .deps *.dSYM
	$(MAKE) -C $(MASSTREEDIR) clean
	$(MAKE) -C third-party/rpmalloc clean

DEPFILES := $(wildcard $(DEPSDIR)/*.d)
ifneq ($(DEPFILES),)
include $(DEPFILES)
endif

ifneq ($(strip $(CXX) $(CXXFLAGS)),$(strip $(DEP_CXX_CONFIG)))
DEP_CXX_CONFIG := $(shell mkdir -p $(DEPSDIR); echo >$(DEPSDIR)/stamp; echo DEP_CXX_CONFIG:='$(CXX) $(CXXFLAGS)' >$(DEPSDIR)/_cxxconfig.d)
endif

.PHONY: clean all unit check
